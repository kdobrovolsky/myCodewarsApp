export function setupCounter(element) {
    // Задача 1.
    // Вернуть количество гласных в заданной строке.Мы будем считать гласными буквы a, e, i, o, u (но не y).
    // Строка может состоять только из букв в нижнем регистре и/или пробелов.

    function getCount(str) {
        const vowels = str.match(/[aeiou]/gi)
        return vowels ? vowels.length : 0
    }

    //Разбор: сначала мы регулярным выраженим ищем один символ из перечисленных, далее с помощью match проверяем, если есть совпадение,
    // то возвращаем найденный массив гластных. Если массив существует => возвращаем его длину, если null => 0

    // Задача 2.
    // Доработайте функцию так, чтобы она разбивала верблюжий регистр (camelCase), вставляя пробел между словами.

    function solution(string) {
        return string.replace(/([A-Z])/g, ' $1')
    }

    // Разбор: с помощью регулярного выражение ищем заглавные буквы, далее с помощью $1 ставим проблем и для замены подстроки в строке используется метод replace

    // Задача 3.
    // Постройте функцию, которая возвращает массив целых чисел от n до 1, где n > 0.

    const reverseSeq = (n) => {
        const arr = []
        for (let i = 1; i <= n; i++) {
            arr.push(i)
        }
        return arr.reverse()
    };

    // Задача 4.
    // Ваша задача — найти первый элемент массива, который не является последовательным.
    //     Под "не последовательным" подразумевается элемент, который не ровно на 1 больше предыдущего элемента массива.
    //     Пример:
    // В массиве [1, 2, 3, 4, 6, 7, 8]:
    // 1, 2, 3, 4 — последовательные (каждый следующий на 1 больше предыдущего),
    // но 6 не следует за 4 с разницей +1, поэтому это первое непоследовательное число.
    //     Условия:
    // Если весь массив последовательный, вернуть null.
    //     Массив всегда содержит минимум 2 элемента, все числа уникальны и идут в порядке возрастания.
    //     Числа могут быть как положительными, так и отрицательными.
    //     Дополнительное задание (не проверяется в тестах):
    // Сможете ли вы сделать так, чтобы функция возвращала null для пустого массива [] и массива с одним элементом [x]?

    function firstNonConsecutive(arr) {
        if (arr.length < 2) return null
        for (let i = 1; i < arr.length; i++) {
            if (arr[i] !== arr[i - 1] + 1) return arr[i]
        }
        return null
    }

    // Задача 5
    // Предположим, что скорость падения лепестка составляет 5 см/с, и лепестку требуется 80 секунд, чтобы достичь земли с определённой ветки.
    //     Напишите функцию, которая принимает в качестве входных данных скорость лепестка (в см/с) и возвращает время, необходимое этому лепестку, чтобы достичь земли с той же ветки.
    //     Примечания:
    // Движение лепестка довольно сложное, поэтому в данном случае мы можем рассматривать скорость как константу во время его падения.
    //     Обратите внимание на типы данных.
    //     Если начальная скорость неположительна, возвращаемое значение должно быть равно 0.

    function sakuraFall(v) {
        const distance = 400;
        if (v <= 0) return 0;
        return distance / v;
    }

    // Задача 6
    // Доработайте функцию/метод так, чтобы она возвращала URL-адрес, удаляя всё, что находится после символа # (якоря).
    //     Примеры:
    // "www.codewars.com#about" → "www.codewars.com"
    // "www.codewars.com?page=1" → "www.codewars.com?page=1"

    function removeUrlAnchor(url) {
        const anchorIndex = url.indexOf('#');
        return anchorIndex === -1 ? url : url.substring(0, anchorIndex);
    }

    // Задача 7
    // Завершите функцию, которая преобразует шестнадцатеричное число (заданное в виде строки) в десятичное число.

    function hexToDec(hexString) {
        return parseInt(hexString, 16)
    }

    //Задача 8
//     Для решения этой задачи вам необходимо создать программу, которая определяет, кто съел последнее печенье. Если входные данные — строка,
//     то печенье съел «Зак». Если входные данные — число с плавающей точкой или целое число, то печенье съела «Моника». Если входные данные — что-то другое, то печенье съела «собака».
//     Вывод: «Кто съел последнее печенье? Это был (имя)!»
// Например: Ввод = "привет" --> Вывод = "Кто съел последнее печенье? Это был Зак!" (Вы возвращаете Зака, потому что входные данные — строка).
//     Примечание: Убедитесь, что вы возвращаете правильное сообщение с правильными пробелами и знаками препинания.

    function cookie(x) {
        typeof x === 'string' ? `Кто съел последнее печенье? Это был Zak` : `Кто съел последнее печенье? Это был Dog`
        typeof x === 'number' ? `Кто съел последнее печенье? Это былa Monika` : `Кто съел последнее печенье? Это был Dog`
        if (typeof x === 'string') {
            return `Кто съел последнее печенье? Это был Zak`
        } else if (typeof x === 'number') {
            return `Кто съел последнее печенье? Это былa Monika`
        } else {
            return `Кто съел последнее печенье? Это был Dog`
        }


    }

    // Задача 9
    // Ваша задача — отсортировать заданную строку. Каждое слово в строке будет содержать одно число. Это число определяет позицию слова в результатах.
    //     Примечание: Числа могут быть от 1 до 9. Поэтому первым словом будет 1 (а не 0).
    // Если входная строка пуста, вернуть пустую строку. Слова во входной строке будут содержать только допустимые последовательные числа.
    // 6kyu


    const order = (words) => {
        const arrWords = words.split(' ').sort((a, b) => a.replace(/\D/g, '') - b.replace(/\D/g, '')).join(' ')
        return arrWords
    }
    // Задача 10
    // Создайте функцию с двумя аргументами, которая будет возвращать массив из первых n значений, кратных x.
    //     Предположите, что и заданное число, и количество подсчётов будут положительными числами больше 0.
    // Верните результаты в виде массива или списка (в зависимости от языка).

    function countBy(x, n) {

        const arr = []
        for (let i = 1; i <= n; i++) {
            arr.push(x * i);
        }
        return arr;
    }

    // Задача 11
    // Напиши функцию с именем setAlarm / set_alarm / set-alarm / setalarm (в зависимости от языка программирования),
    // которая принимает два параметра.
    // Первый параметр, employed (работаешь), имеет значение true,
    // когда ты работаешь, а второй параметр, vacation (отпуск), имеет значение true, когда ты в отпуске.
    // Функция должна возвращать true, если ты работаешь (employed) и не в отпуске (не vacation)
    // (потому что именно при этих обстоятельствах тебе нужно установить будильник).
    // В противном случае она должна возвращать false. Примеры:

    const setAlarm = (employed, vacation) => employed && !vacation ? true : false

    // Задача 12
    // Вам необходимо создать функцию с именем reverseIt.
    //     Напишите функцию так, чтобы при передаче строки или числа в качестве данных она возвращала данные в обратном порядке. Если данные имеют другой тип, верните их как есть.
    //     Примеры входных данных и последующих выходных данных:


    function reverseIt(data) {
        if (typeof data !== 'string' && typeof data !== 'number') {
            return data;
        }
        const reversed = data.toString().split('').reverse().join('');
        return typeof data === 'number' ? Number(reversed) : reversed;
    }

    // Задача 13
    // Напишите функцию, которая складывает два вызова.
    //     Все входные данные будут целыми числами.
// 1
    const add = (a) => {
        return function (b) {
            return a + b;
        }
    }
    // 2
    const add2 = a => b => a + b


    //Задача 14
    // Напишите функцию, которая принимает массив строк в качестве аргумента и возвращает отсортированный массив, содержащий те же строки, упорядоченные от самой короткой к самой длинной
    //     Например, если этот массив передан в качестве аргумента:
    //     ["Телескопы", "Очки", "Глаза", "Монокли"]
    // Ваша функция вернет следующий массив:
    //     ["Глаза", "Очки", "Монокли", "Телескопы"]
    // Все строки в массиве, переданном вашей функции, будут иметь разную длину, поэтому вам не придётся решать, как упорядочить несколько строк одинаковой длины

    const sortByLength = (array) => array.sort((a, b) => a.length - b.length,0)


    // Задача 15
    // В этом небольшом задании вам дано строка с числами, разделёнными пробелами, и нужно вернуть наибольшее и наименьшее число.
    //     Примечания
    // Все числа — допустимые значения типа Int32, проверять их не нужно.
    //     Входная строка всегда содержит хотя бы одно число.
    //     Строка-результат должна содержать два числа, разделённые одним пробелом, причём сначала идёт наибольшее число, затем — наименьшее.

    function highAndLow(numbers){
        if(!numbers) return
        const arrNum = numbers.split(' ').map(Number);
        const result = arrNum.reduce(
            (acc, num) => ({
                min: Math.min(acc.min, num),
                max: Math.max(acc.max, num)
            }),
            { min: arrNum[0], max: arrNum[0] }
        );
        return `${result.max} ${result.min}`;
    }

    // Задача 16
    // Aнаграмма — это результат перестановки букв слова для получения нового слова (см. Википедию).
    //     Примечание: анаграммы нечувствительны к регистру.
    //     Допиши функцию так, чтобы она возвращала true, если два переданных аргумента являются анаграммами друг друга, и false — в противном случае.
    // Variant 1
    const isAnagram =(test, original) => {
        if(test.length !== original.length) return false;
        const sortedTest = test.toLowerCase().split('').sort().join('');
        const sortedOriginal = original.toLowerCase().split('').sort().join('')
        return sortedTest === sortedOriginal;
    };
    // Variant 2
    const isAnagram2 =(test, original) => {
       return  test.toLowerCase().split('').sort().join('') === original.toLowerCase().split('').sort().join('')
    }

    console.log(isAnagram2("foefet","toffee"))
}
